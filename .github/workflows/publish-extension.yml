name: Build and Publish VS Code Extension

on:
    push:
        branches:
            - release
        tags:
            - "v*"
    release:
        types: [published]
    workflow_dispatch:
        inputs:
            publish:
                description: "Publish to the VS Code Marketplace"
                required: false
                default: "false"

jobs:
    build-server-binaries:
        name: Build server binary (${{ matrix.os }})
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Build language server
              run: cargo build --release

            - name: Upload server binary
              uses: actions/upload-artifact@v4
              with:
                  name: server-${{ matrix.os }}
                  path: target/release/manifold-language-server${{ matrix.os == 'windows-latest' && '.exe' || '' }}

    detect-version:
        runs-on: ubuntu-latest
        outputs:
            bumped: ${{ steps.check.outputs.bumped }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check for version bump
              id: check
              env:
                  BEFORE_SHA: ${{ github.event.before }}
              run: |
                  python3 scripts/check_version_bump.py --before "${BEFORE_SHA}" --output "$GITHUB_OUTPUT"

  build:
    needs:
      - detect-version
      - build-server-binaries
    if: needs.detect-version.outputs.bumped == 'true'
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Set up Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install

            - name: Download server binaries
              uses: actions/download-artifact@v4
              with:
                  pattern: server-*
                  path: dist/server-binaries

            - name: Stage server binaries for packaging
              run: |
                  set -euo pipefail
                  mkdir -p client/bin/linux client/bin/darwin client/bin/win32
                  mkdir -p jetbrains/bin/linux jetbrains/bin/macos jetbrains/bin/windows

                  install -m 755 dist/server-binaries/server-ubuntu-latest/manifold-language-server client/bin/linux/manifold-language-server
                  install -m 755 dist/server-binaries/server-ubuntu-latest/manifold-language-server jetbrains/bin/linux/manifold-language-server

                  install -m 755 dist/server-binaries/server-macos-latest/manifold-language-server client/bin/darwin/manifold-language-server
                  install -m 755 dist/server-binaries/server-macos-latest/manifold-language-server jetbrains/bin/macos/manifold-language-server

                  install -m 755 dist/server-binaries/server-windows-latest/manifold-language-server.exe client/bin/win32/manifold-language-server.exe
                  install -m 755 dist/server-binaries/server-windows-latest/manifold-language-server.exe jetbrains/bin/windows/manifold-language-server.exe

            - name: Sync extension versions
              run: python3 scripts/sync_versions.py

            - name: Generate extension READMEs
              run: python3 scripts/generate_readmes.py

            - name: Generate extension icons
              run: pnpm sync-icons

            - name: Run cargo clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: Run cargo tests
              run: cargo test --all

            - name: Compile VS Code extension
              run: pnpm compile

            - name: Package VS Code extension
              run: pnpm package

            - name: Publish to VS Code Marketplace
              if: ${{ github.event_name == 'release' || github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.publish == 'true') }}
              run: |
                  VSCE_TOKEN="${{ secrets.VSCE_TOKEN }}"
                  if [ -z "$VSCE_TOKEN" ]; then
                    echo "VSCE token not provided; skipping publish step."
                    exit 0
                  fi
                  PACKAGE=$(ls client/*.vsix | tail -n 1)
                  pnpm --dir client exec vsce publish --pat "$VSCE_TOKEN" --packagePath "$(realpath "$PACKAGE")"

            - name: Upload VSIX artifact
              uses: actions/upload-artifact@v4
              with:
                  name: manifold-language-client-vsix
                  path: "client/*.vsix"
