#!/usr/bin/env python3
"""Produce editor-specific README files from the canonical root README.

Each extension keeps a small stub with details that only apply to that editor.
This script concatenates the root README with the stub and writes the result to
`client/README.md` and `jetbrains/README.md` (or any future targets listed in
`READMES`). It allows us to maintain shared documentation in one place without
copying edits across multiple files.
"""
from __future__ import annotations

from pathlib import Path
from typing import Sequence, Tuple

ROOT = Path(__file__).resolve().parents[1]
AUTOGEN_HEADER = "<!-- Generated by scripts/generate_readmes.py; do not edit directly. -->"

READMES: Sequence[Tuple[str, str]] = (
    ("client/README.stub.md", "client/README.md"),
    ("jetbrains/README.stub.md", "jetbrains/README.md"),
)


def load_root_readme() -> str:
    text = (ROOT / "README.md").read_text(encoding="utf-8")
    return text.strip()


def build_content(base: str, stub_path: Path) -> str:
    stub = stub_path.read_text(encoding="utf-8").strip()
    if stub:
        combined = f"{AUTOGEN_HEADER}\n\n{base}\n\n{stub}\n"
    else:
        combined = f"{AUTOGEN_HEADER}\n\n{base}\n"
    return combined


def main() -> int:
    base_readme = load_root_readme()
    changed = False

    for stub_rel, output_rel in READMES:
        stub_path = ROOT / stub_rel
        output_path = ROOT / output_rel
        if not stub_path.exists():
            continue
        content = build_content(base_readme, stub_path)
        previous = output_path.read_text(encoding="utf-8") if output_path.exists() else None
        if previous != content:
            output_path.write_text(content, encoding="utf-8")
            changed = True
            print(f"Updated {output_rel}")

    if not changed:
        print("README files already up-to-date.")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
